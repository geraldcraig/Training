{"ast":null,"code":"import axios from \"axios\";\nimport { logout } from \"./shared/utils/auth\";\nconst apiClient = axios.create({\n  baseURL: \"http://localhost:5002/api\",\n  timeout: 1000\n});\napiClient.interceptors.request.use(config => {\n  const userDetails = localStorage.getItem(\"user\");\n\n  if (userDetails) {\n    const token = JSON.parse(userDetails).token;\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n\n  return config;\n}, err => {\n  return Promise.reject(err);\n}); // public routes\n\nexport const login = async data => {\n  try {\n    return await apiClient.post(\"/auth/login\", data);\n  } catch (exception) {\n    return {\n      error: true,\n      exception\n    };\n  }\n};\nexport const register = async data => {\n  try {\n    return await apiClient.post(\"/auth/register\", data);\n  } catch (exception) {\n    return {\n      error: true,\n      exception\n    };\n  }\n}; // secure routes\n\nconst checkResponseCode = exception => {\n  var _exception$response;\n\n  const responseCode = exception === null || exception === void 0 ? void 0 : (_exception$response = exception.response) === null || _exception$response === void 0 ? void 0 : _exception$response.status;\n\n  if (responseCode) {\n    (responseCode === 401 || responseCode === 403) && logout();\n  }\n};","map":{"version":3,"sources":["/Users/geraldcraig/Repos/discord-app/discord-frontend/src/api.js"],"names":["axios","logout","apiClient","create","baseURL","timeout","interceptors","request","use","config","userDetails","localStorage","getItem","token","JSON","parse","headers","Authorization","err","Promise","reject","login","data","post","exception","error","register","checkResponseCode","responseCode","response","status"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,QAAuB,qBAAvB;AAEA,MAAMC,SAAS,GAAGF,KAAK,CAACG,MAAN,CAAa;AAC7BC,EAAAA,OAAO,EAAE,2BADoB;AAE7BC,EAAAA,OAAO,EAAE;AAFoB,CAAb,CAAlB;AAKAH,SAAS,CAACI,YAAV,CAAuBC,OAAvB,CAA+BC,GAA/B,CACGC,MAAD,IAAY;AACV,QAAMC,WAAW,GAAGC,YAAY,CAACC,OAAb,CAAqB,MAArB,CAApB;;AAEA,MAAIF,WAAJ,EAAiB;AACf,UAAMG,KAAK,GAAGC,IAAI,CAACC,KAAL,CAAWL,WAAX,EAAwBG,KAAtC;AACAJ,IAAAA,MAAM,CAACO,OAAP,CAAeC,aAAf,GAAgC,UAASJ,KAAM,EAA/C;AACD;;AAED,SAAOJ,MAAP;AACD,CAVH,EAWGS,GAAD,IAAS;AACP,SAAOC,OAAO,CAACC,MAAR,CAAeF,GAAf,CAAP;AACD,CAbH,E,CAgBA;;AAEA,OAAO,MAAMG,KAAK,GAAG,MAAOC,IAAP,IAAgB;AACnC,MAAI;AACF,WAAO,MAAMpB,SAAS,CAACqB,IAAV,CAAe,aAAf,EAA8BD,IAA9B,CAAb;AACD,GAFD,CAEE,OAAOE,SAAP,EAAkB;AAClB,WAAO;AACLC,MAAAA,KAAK,EAAE,IADF;AAELD,MAAAA;AAFK,KAAP;AAID;AACF,CATM;AAWP,OAAO,MAAME,QAAQ,GAAG,MAAOJ,IAAP,IAAgB;AACtC,MAAI;AACF,WAAO,MAAMpB,SAAS,CAACqB,IAAV,CAAe,gBAAf,EAAiCD,IAAjC,CAAb;AACD,GAFD,CAEE,OAAOE,SAAP,EAAkB;AAClB,WAAO;AACLC,MAAAA,KAAK,EAAE,IADF;AAELD,MAAAA;AAFK,KAAP;AAID;AACF,CATM,C,CAWP;;AAEA,MAAMG,iBAAiB,GAAIH,SAAD,IAAe;AAAA;;AACvC,QAAMI,YAAY,GAAGJ,SAAH,aAAGA,SAAH,8CAAGA,SAAS,CAAEK,QAAd,wDAAG,oBAAqBC,MAA1C;;AAEA,MAAIF,YAAJ,EAAkB;AAChB,KAACA,YAAY,KAAK,GAAjB,IAAwBA,YAAY,KAAK,GAA1C,KAAkD3B,MAAM,EAAxD;AACD;AACF,CAND","sourcesContent":["import axios from \"axios\";\r\nimport { logout } from \"./shared/utils/auth\";\r\n\r\nconst apiClient = axios.create({\r\n  baseURL: \"http://localhost:5002/api\",\r\n  timeout: 1000,\r\n});\r\n\r\napiClient.interceptors.request.use(\r\n  (config) => {\r\n    const userDetails = localStorage.getItem(\"user\");\r\n\r\n    if (userDetails) {\r\n      const token = JSON.parse(userDetails).token;\r\n      config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n\r\n    return config;\r\n  },\r\n  (err) => {\r\n    return Promise.reject(err);\r\n  }\r\n);\r\n\r\n// public routes\r\n\r\nexport const login = async (data) => {\r\n  try {\r\n    return await apiClient.post(\"/auth/login\", data);\r\n  } catch (exception) {\r\n    return {\r\n      error: true,\r\n      exception,\r\n    };\r\n  }\r\n};\r\n\r\nexport const register = async (data) => {\r\n  try {\r\n    return await apiClient.post(\"/auth/register\", data);\r\n  } catch (exception) {\r\n    return {\r\n      error: true,\r\n      exception,\r\n    };\r\n  }\r\n};\r\n\r\n// secure routes\r\n\r\nconst checkResponseCode = (exception) => {\r\n  const responseCode = exception?.response?.status;\r\n\r\n  if (responseCode) {\r\n    (responseCode === 401 || responseCode === 403) && logout();\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}